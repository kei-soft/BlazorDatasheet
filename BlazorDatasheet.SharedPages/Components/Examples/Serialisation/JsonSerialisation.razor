@using System.Drawing
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.Formats.DefaultConditionalFormats
@using BlazorDatasheet.Core.Serialization.Json
@using BlazorDatasheet.Core.Validation
@using BlazorDatasheet.Formula.Core
<div>
    <Datasheet Sheet="_sheet1"/>
    <button @onclick="SerializeFirst">Serialize</button>
</div>

<div>
    <h3>Json Output</h3>
    <textarea style="width: 500px; height: 500px;" @bind="@_json"></textarea>
    <br/>
    <button @onclick="DeserializeIntoSecond">De-serialize</button>
    <Datasheet Sheet="_sheet2"></Datasheet>
</div>

@code {

    private Sheet _sheet1 = null!;
    private Sheet _sheet2 = null!;

    private string _json = string.Empty;

    protected override void OnInitialized()
    {
        _sheet1 = new Sheet(5, 5);
        _sheet1.ConditionalFormats.Apply(_sheet1.Range("C:C"), new NumberScaleConditionalFormat(Color.Red, Color.Blue));
        _sheet1.Cells["C1"]!.Value = 1;
        _sheet1.Cells["C2"]!.Value = 2;
        _sheet1.Range("D:D")!.Type = "boolean";
        _sheet1.Range("A1")!.AddValidator(new SourceValidator(["Value1", "Value2"], false));
        _sheet1.Range("A1")!.Type = "select";
        _sheet1.Range("A1")!.Value = "Value3";
        _sheet2 = new Sheet(2, 2);
        
        _sheet1.ConditionalFormats.Apply(_sheet1.Range("A:A"), new CustomCf(5, "#ffff00"));

        base.OnInitialized();
    }

    protected void SerializeFirst()
    {
        var serializer = new SheetJsonSerializer();
        // Add custom conditional format resolver - the name needs to be the same as the class name
        serializer.Resolvers.ConditionalFormat.Add(nameof(CustomCf), typeof(CustomCf));
        _json = serializer.Serialize(_sheet1.Workbook, writeIndented: true);
    }

    protected void DeserializeIntoSecond()
    {
        var deserializer = new SheetJsonDeserializer();
        deserializer.Resolvers.ConditionalFormat.Add(nameof(CustomCf), typeof(CustomCf));
        var w2 = deserializer.Deserialize(_json);
        _sheet2 = w2.Sheets.First();
    }

    public class CustomCf : ConditionalFormatAbstractBase
    {
        public double Threshold { get; set; }
        public string ColorToSet { get; set; }

        public CustomCf(double threshold, string colorToSet)
        {
            Threshold = threshold;
            ColorToSet = colorToSet;
        }

        public override CellFormat? CalculateFormat(int row, int col, Sheet sheet)
        {
            var value = sheet.Cells.GetCellValue(row, col);
            if (value.ValueType == CellValueType.Number)
                if (value.GetValue<double>() > Threshold)
                    return new CellFormat() { BackgroundColor = ColorToSet };

            return null;
        }
    }

}