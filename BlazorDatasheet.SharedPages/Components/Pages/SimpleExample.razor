@page "/SimpleExample"
@using BlazorDatasheet.SharedPages.Components.Examples
@using BlazorDatasheet.SharedPages.Components.Examples.Data
<h3>Simple example</h3>

<div class="block">
    The <code>Sheet</code> class is the workhorse of the BlazorDatasheet library. A <code>Datasheet</code> requires a
    sheet to display.
    Most of your interaction with the library will be through the <code>Sheet</code> class.
</div>

<div class="block">
    A simple <code>Sheet</code> can be displayed in a <code>Datasheet</code> as in the following example.
</div>

<CodeExample ComponentType="typeof(Simple)"/>

<h4>User interaction</h4>

<div class="block">
    Users can interact with the datasheet by selecting cells with the mouse or arrow keys. A context menu is shown to
    the user on right-click. Undo/redo is available for most actions.
</div>

<h4>Programmatic control</h4>

<div class="block">
    Most of the control of the sheet is through the <code>Sheet</code> object.
    The below example sets the cell at A1 to the value "Test" when the sheet is loaded. Clicking the button will set the
    selected cell(s) to the value of the text-field.
</div>

<CodeExample ComponentType="typeof(SimpleProgrammaticControl)"/>

<div class="block">
    There are multiple ways to access individual cells, for example:
</div>

<CodeBlock>sheet.Cells[0, 0].Value = "Test";
    sheet.Range("A1:A4").Value = "Test"; // Acts on all cells in the range
    sheet.Cells["A1"].Value = "Test";
    sheet.Cells.SetValue(0, 0, "Test");
</CodeBlock>

<div class="block">
    Standard excel cell/range access is supported e.g <code>A1</code>, <code>A:B</code>, <code>2:4</code>,
    <code>A1:B2</code>, <code>A$1:B$2</code> etc.
</div>

<h4>Events</h4>

<div class="block">
    The sheet has multiple events that can be used to track changes to the sheet. This example shows important events.
</div>

<CodeExample ComponentType="typeof(EventsExample)"/>

<h4>Row and column headers</h4>

<div class="block">
    Row and column headers can be hidden. Row and column headers can also be set to custom values. Headings are sticky
    by default, but can also be made non-sticky.
</div>

<CodeExample ComponentType="typeof(RowColumnHeaders)"/>