@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.Core.Interfaces

<div style="display: flex; flex-direction: column; gap: 0.2rem;">
    <div style="display: flex; flex-direction: row; gap: 0.2rem;">
        <ToggleButton
            Sheet="Sheet"
            IsSelected="IsSelected"
            OnToggle="OnToggle">
            @BoldIcon
        </ToggleButton>
        <ColourSelector
            FormatSelector="@(s => new CellFormat() { BackgroundColor = s })"
            Sheet="Sheet">
            @PaintIcon
        </ColourSelector>
        <ColourSelector
            FormatSelector="@(s => new CellFormat() { ForegroundColor = s })"
            Sheet="Sheet">
            @TextIcon
        </ColourSelector>
    </div>
    <div style="display: flex; flex-direction: row;">
        <RangeSelector Datasheet="Datasheet" Sheet="Sheet"/>
        <FormulaTextBox Sheet="Sheet" Datasheet="Datasheet"/>
    </div>
</div>

@code {

    [Parameter] public required Sheet Sheet { get; set; }

    [Parameter] public required Datasheet Datasheet { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private bool IsSelected(IReadOnlyCell arg)
    {
        return arg.Format.FontWeight == "bold";
    }

    private void OnToggle(SheetRange arg1, bool arg2)
    {
        arg1.Format = new CellFormat()
        {
            FontWeight = arg2 ? "bold" : "normal"
        };
    }

    private RenderFragment BoldIcon => @<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"
                                             viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                             stroke-linecap="round" stroke-linejoin="round"
                                             class="icon icon-tabler icons-tabler-outline icon-tabler-bold">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
        <path d="M7 5h6a3.5 3.5 0 0 1 0 7h-6z"/>
        <path d="M13 12h1a3.5 3.5 0 0 1 0 7h-7v-7"/>
    </svg>;

    private RenderFragment PaintIcon => @<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"
                                              viewBox="0 0 24 24" fill="none"
                                              stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                              stroke-linejoin="round"
                                              class="icon icon-tabler icons-tabler-outline icon-tabler-bucket-droplet">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
        <path d="M5 16l1.465 1.638a2 2 0 1 1 -3.015 .099l1.55 -1.737z"/>
        <path
            d="M13.737 9.737c2.299 -2.3 3.23 -5.095 2.081 -6.245c-1.15 -1.15 -3.945 -.217 -6.244 2.082c-2.3 2.299 -3.231 5.095 -2.082 6.244c1.15 1.15 3.946 .218 6.245 -2.081z"/>
        <path
            d="M7.492 11.818c.362 .362 .768 .676 1.208 .934l6.895 4.047c1.078 .557 2.255 -.075 3.692 -1.512c1.437 -1.437 2.07 -2.614 1.512 -3.692c-.372 -.718 -1.72 -3.017 -4.047 -6.895a6.015 6.015 0 0 0 -.934 -1.208"/>
    </svg>;

    private RenderFragment TextIcon => @<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12"
                                             viewBox="0 0 24 24" fill="none"
                                             stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                             stroke-linejoin="round"
                                             class="feather feather-type">
        <polyline points="4 7 4 4 20 4 20 7"></polyline>
        <line x1="9" y1="20" x2="15" y2="20"></line>
        <line x1="12" y1="4" x2="12" y2="20"></line>
    </svg>;

}