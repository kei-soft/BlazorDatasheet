@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Events
@using BlazorDatasheet.Formula.Core

<input type="text" class="bds-formula-input" style="width: 80px;" @bind-value:get="SelectedRangeValue"
       @bind-value:set="OnInput"/>

@code {

       [Parameter] public required Sheet Sheet { get; set; }
       [Parameter] public required Datasheet Datasheet { get; set; }

       private string? _selectedRangeValue;

       private string? SelectedRangeValue
       {
              get => _selectedRangeValue;
              set
              {
                     _selectedRangeValue = value;
                     StateHasChanged();
              }
       }

       private async Task OnInput(string? value)
       {
              var newValue = value ?? string.Empty;
              if (string.IsNullOrEmpty(newValue) || string.IsNullOrEmpty(SelectedRangeValue))
              {
                     return;
              }

              var region = Sheet.Range(newValue)?.Region;
              if (region != null)
              {
                     await Datasheet.ScrollToContainRegion(region);
                     Sheet.Selection.Set(region);
                     return;
              }

              Sheet.NamedRanges.Set(newValue, SelectedRangeValue);
              SelectedRangeValue = newValue;
       }

       protected override void OnInitialized()
       {
              Sheet.Selection.SelectionChanged += SelectionOnSelectionChanged;
       }

       private void SelectionOnSelectionChanged(object? sender, SelectionChangedEventArgs e)
       {
              if (Sheet.Selection.IsSelecting || !Sheet.Selection.Regions.Any())
                     return;

              var sheetSelection = Sheet.Selection.Regions;
              if (sheetSelection.Count > 1)
              {
                     SelectedRangeValue = null;
                     return;
              }

              var selectedRegion = sheetSelection[0];
              var namedRegion = Sheet.NamedRanges.GetRegionName(selectedRegion);
              if (namedRegion != null)
              {
                     SelectedRangeValue = namedRegion;
                     return;
              }

              SelectedRangeValue = RangeText.RegionToText(selectedRegion);
       }

}