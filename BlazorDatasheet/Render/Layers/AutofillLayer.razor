@using System.Text
@using BlazorDatasheet.Core.Commands.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Events
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Events
@using BlazorDatasheet.Extensions
@using BlazorDatasheet.Services
@using Microsoft.JSInterop
@inherits Layer
@implements IAsyncDisposable
@inject IJSRuntime Js;

@if (!Sheet.Editor.IsEditing && Sheet.Selection.ActiveRegion != null)
{
    <!-- render dragger (bottom right corner) -->
    <div id="auto-filler"
         class="unselectable auto-fill"
         @onpointerdown="DraggerMouseDown"
         @onpointerup="DraggerMouseUp"
         style="@GetDraggerStyleString();cursor:crosshair;pointer-events: all;">
    </div>
}


<!-- drag preview -->
@if (_isDragging && _dragPreviewRegion != null)
{
    <BoxOverlayRenderer
        BackgroundVisible="false"
        BorderThickness="2"
        BorderStyle="dashed"
        X="GetLayerColumnX(_dragPreviewRegion.Left)"
        Y="GetLayerRowY(_dragPreviewRegion.Top)"
        Width="Sheet.Columns.GetVisualWidthBetween(_dragPreviewRegion.Left, _dragPreviewRegion.Right + 1)"
        Height="Sheet.Rows.GetVisualHeightBetween(_dragPreviewRegion.Top, _dragPreviewRegion.Bottom + 1)"/>
}

@code{

    private bool _isDragging = false;

    // Document start position of the pointer
    private Point2d _dragStartDocumentPosition = new Point2d();
    private IRegion? _dragPreviewRegion;
    private CellLayoutProvider _cellLayoutProvider = new CellLayoutProvider(new Sheet(0, 0));
    private bool _pointerEventsRegistered;
    private IWindowEventService _windowEventService = null!;

    protected override void OnInitialized()
    {
        _windowEventService = new WindowEventService(Js);
        base.OnInitialized();
    }

    protected override void OnSheetChange(Sheet newSheet, Sheet oldSheet)
    {
        oldSheet.Selection.SelectionChanged -= OnSelectionChanged;
        newSheet.Selection.SelectionChanged += OnSelectionChanged;
        _cellLayoutProvider = new CellLayoutProvider(newSheet);
    }

    private void OnSelectionChanged(object? sender, SelectionChangedEventArgs args)
    {
        StateHasChanged();
    }

    private void OnSelectingChanged(object? sender, IRegion? args)
    {
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _windowEventService.RegisterMouseEvent("mousemove", HandleWindowMouseMove, 50);
            await _windowEventService.RegisterMouseEvent("mouseup", HandleWindowMouseUp);
        }
    }

    private Task<bool> HandleWindowMouseUp(MouseEventArgs arg)
    {
        if (!_isDragging || _dragPreviewRegion == null)
            return Task.FromResult(false);

        Sheet.Commands.ExecuteCommand(new AutoFillCommand(Sheet.Selection.ActiveRegion!, _dragPreviewRegion.Clone()));


        _isDragging = false;
        _dragPreviewRegion = null;

        return Task.FromResult(true);
    }

    private Task<bool> HandleWindowMouseMove(MouseEventArgs e)
    {
        if (!_isDragging)
            return Task.FromResult(false);

        if (Sheet.Selection.ActiveRegion == null)
            return Task.FromResult(false);

        var dx = e.PageX - _dragStartDocumentPosition.X;
        var dy = e.PageY - _dragStartDocumentPosition.Y;

        if (Math.Abs(dx) < 5 && Math.Abs(dy) < 5)
            return Task.FromResult(true);

        var selRect = Sheet.Selection.ActiveRegion.GetRect(Sheet);
        var sheetX = selRect.X + selRect.Width + dx;
        var sheetY = selRect.Y + selRect.Height + dy;
        var cellAtMouse = _cellLayoutProvider.ComputeCell(sheetX, sheetY);

        if (Sheet.Selection.ActiveRegion.Contains(cellAtMouse))
            _dragPreviewRegion = CalculateContractRegion(dx, dy, cellAtMouse);
        else
            _dragPreviewRegion = CalculateExpandRegion(sheetX, sheetY, cellAtMouse);

        _dragPreviewRegion = Sheet.Region.GetIntersection(_dragPreviewRegion);

        this.StateHasChanged();

        return Task.FromResult(true);
    }

    private IRegion CalculateContractRegion(double dx, double dy, CellPosition cellMousePosition)
    {
        if (Sheet.Selection.ActiveRegion == null)
            return new Region(cellMousePosition.row, cellMousePosition.col);

        var left = Sheet.Selection.ActiveRegion.Left;
        var top = Sheet.Selection.ActiveRegion.Top;
        var axis = Math.Abs(dx) >= Math.Abs(dy) ? Axis.Col : Axis.Row;
        var right = axis == Axis.Col ? cellMousePosition.col : Sheet.Selection.ActiveRegion.Right;
        var bottom = axis == Axis.Row ? cellMousePosition.row : Sheet.Selection.ActiveRegion.Bottom;
        return new Region(top, bottom, left, right);
    }

    private IRegion? CalculateExpandRegion(double sheetX, double sheetY, CellPosition cellMousePosition)
    {
        if (Sheet.Selection.ActiveRegion == null)
            return null;

        var selRect = Sheet.Selection.ActiveRegion.GetRect(Sheet);
        var axis = GetExpansionAxis(sheetX, sheetY, selRect);

        var expandTo = axis == Axis.Col ? new Region(Sheet.Selection.ActiveRegion.Bottom, cellMousePosition.col) : new Region(cellMousePosition.row, Sheet.Selection.ActiveRegion.Left);

        var expandedRegion = Sheet.Selection.ActiveRegion.GetBoundingRegion(expandTo);
        return expandedRegion;
    }

    private Axis GetExpansionAxis(double sheetX, double sheetY, Rect selectionRect)
    {
        var containsX = sheetX >= selectionRect.X && sheetX <= selectionRect.X + selectionRect.Width;
        var containsY = sheetY >= selectionRect.Y && sheetY <= selectionRect.Y + selectionRect.Height;

        if (containsY && !containsX)
            return Axis.Col;

        if (containsX && !containsY)
            return Axis.Row;

        var p = new Point2d(sheetX, sheetY);

        var closestCorner = GetCorners(selectionRect)
            .Select<Point2d, (Point2d p, double dist)>(x => ((x, GetDistSq(x, p))))
            .MinBy(x => x.dist);

        var dx = sheetX - closestCorner.p.X;
        var dy = sheetY - closestCorner.p.Y;

        if (Math.Abs(dx) >= Math.Abs(dy))
            return Axis.Col;
        else
            return Axis.Row;
    }

    private double GetDistSq(Point2d p1, Point2d p2)
    {
        return Math.Pow(p1.X - p2.X, 2) + Math.Pow(p1.Y - p2.Y, 2);
    }

    private List<Point2d> GetCorners(Rect rect)
    {
        return new List<Point2d>()
        {
            new Point2d(rect.X, rect.Y),
            new Point2d(rect.X + rect.Width, rect.Y),
            new Point2d(rect.X + rect.Width, rect.Y + rect.Height),
            new Point2d(rect.X, rect.Y + rect.Height),
        };
    }

    private Direction GetDirection(double dx, double dy)
    {
        if (dx >= dy)
        {
            if (dx > 0)
                return Direction.Right;
            if (dx < 0)
                return Direction.Left;
            return Direction.None;
        }
        else
        {
            if (dy > 0)
                return Direction.Down;
            if (dy < 0)
                return Direction.Up;
        }

        return Direction.None;
    }


    private void SelectionOnSelectionChanged(object? sender, SelectionChangedEventArgs args)
    {
        StateHasChanged();
    }

    private void SelectionOnSelectingChanged(object? sender, IRegion? e)
    {
        StateHasChanged();
    }

    private Task DraggerMouseDown(PointerEventArgs e)
    {
        if (Sheet.Selection.ActiveRegion == null)
            return Task.CompletedTask;

        _isDragging = true;

        _dragStartDocumentPosition = new Point2d(e.PageX, e.PageY);
        return Task.CompletedTask;
    }

    private void DraggerMouseUp(PointerEventArgs obj)
    {
        // if the user mouses up on the dragger (which doesn't move)
        // then we should just cancel out of the drag
        _isDragging = false;
        _dragPreviewRegion = null;
        this.StateHasChanged();
    }

    private void PointerMouseUp(object? sender, SheetPointerEventArgs? arg)
    {
        _isDragging = false;
        _dragPreviewRegion = null;
        this.StateHasChanged();
    }

    private string GetDraggerStyleString()
    {
        var region = Sheet.Region.GetIntersection(Sheet.Selection.ActiveRegion ?? Sheet.Selection.SelectingRegion);
        if (region == null)
            return "display:none;";

        var x = GetLayerColumnX(region.Right + 1);
        var y = GetLayerRowY(region.Bottom + 1);

        var w = 8d;
        var h = 8d;
        var sb = new StringBuilder();
        sb.Append($"display:block;position:absolute;");
        sb.Append($"left:{x - w / 2}px; top:{y - w / 2}px;");
        sb.Append($"width:{w}px;height:{h}px;");
        sb.Append("background:var(--selection-border-color);");
        sb.Append("border:1px solid var(--sheet-bg-color);");
        return sb.ToString();
    }

    public async ValueTask DisposeAsync()
    {
        await _windowEventService.DisposeAsync();
    }

}