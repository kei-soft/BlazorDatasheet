@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Services
<div class="sheet-layer-container" style="z-index: @(Depth);">
    <div style="position: absolute;
        top: 0;
        left: 0;
        max-width:@(LayerWidth)px;
    max-height:@(LayerHeight)px;
    width:@(LayerWidth)px;
    height:@(LayerHeight)px;
    @(Depth > 0 ? "overflow:hidden;" : "")
    ">
        <CascadingValue Value="ViewRegion">
            <CascadingValue Value="Sheet">
                <CascadingValue Value="Depth" IsFixed="true">
                    <CascadingValue Value="LayerHeight">
                        <CascadingValue Value="LayerWidth">
                            <CascadingValue Value="PointerInputService">
                                @ChildContent
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </div>
</div>

@code {

    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// How deep (number of sub-grids) this container is
    /// </summary>
    [Parameter]
    public int Depth { get; set; }

    [Parameter, EditorRequired] public Region? ViewRegion { get; set; }

    private Region _viewRegion = new(0, 0);

    [Parameter, EditorRequired] public Sheet Sheet { get; set; } = new(0, 0);
    private Sheet _sheet = new(0, 0);

    [Parameter, EditorRequired] public SheetPointerInputService? PointerInputService { get; set; }

    /// <summary>
    /// The width, in px, of the rendered layer region
    /// </summary>
    protected double LayerWidth { get; set; }

    /// <summary>
    /// The height, in px, of the rendered layer region
    /// </summary>
    protected double LayerHeight { get; set; }

    protected override void OnParametersSet()
    {
        var updateSizes = false;

        if (_sheet != Sheet)
        {
            _sheet = Sheet;
            updateSizes = true;
        }

        if (ViewRegion != _viewRegion)
        {
            _viewRegion = ViewRegion ?? new Region(0, 0);
            updateSizes = true;
        }

        if (updateSizes)
        {
            LayerWidth = _sheet.Columns.GetVisualWidthBetween(_viewRegion.Left, _viewRegion.Right + 1);
            LayerHeight = _sheet.Rows.GetVisualHeightBetween(_viewRegion.Top, _viewRegion.Bottom + 1);
        }

        base.OnParametersSet();
    }

    private void UpdateSizes()
    {
    }

}